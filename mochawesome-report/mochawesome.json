{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-21T20:49:48.947Z",
    "end": "2021-09-21T20:49:54.115Z",
    "duration": 5168,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d7f37c54-25f4-4852-9cdb-fd68711e06ec",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
          "title": "user registration",
          "fullFile": "C:\\Users\\Gu\\Desktop\\Task\\tests\\api1-test.js",
          "file": "\\tests\\api1-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate firstName",
              "fullTitle": "user registration should validate firstName",
              "timedOut": false,
              "duration": 600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n    expect(usersData[x].firstName.length).to.be.greaterThanOrEqual(1)\n    expect(usersData[x].firstName .length).to.be.lessThan(20)\n}",
              "err": {},
              "uuid": "ca98c749-bc3a-4807-b599-1e2aeb68b60a",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate email",
              "fullTitle": "user registration should validate email",
              "timedOut": false,
              "duration": 499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nconst emailRegex= /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i\nlet data = await usersData()\n  for(let x = 0 ; x <= usersData.length-1 ; x++) {\n      expect(usersData[x].email.length).to.be.greaterThanOrEqual(5)\n      expect(usersData[x].email.length).to.be.lessThan(100)\n      expect(usersData[x].email).to.match(emailRegex)\n  }",
              "err": {},
              "uuid": "56a26c9e-2bc4-4cd4-8dbb-f9fa0213bb2f",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should countryCode",
              "fullTitle": "user registration should countryCode",
              "timedOut": false,
              "duration": 492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].countryCode.length).to.be.greaterThanOrEqual(2)\n  expect(usersData[x].countryCode.length).to.be.lessThan(5)\n}",
              "err": {},
              "uuid": "02139732-4479-4d92-ad37-4de63e289d0e",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should mobileNumber",
              "fullTitle": "user registration should mobileNumber",
              "timedOut": false,
              "duration": 495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].mobileNumber.length).to.be.greaterThanOrEqual(8)\n  expect(usersData[x].mobileNumber.length).to.be.lessThan(15)\n}",
              "err": {},
              "uuid": "1ed8dfb1-2eeb-4dc7-8a7d-c30722f1bd8c",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should password",
              "fullTitle": "user registration should password",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nconst passwordRegex = (\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].password).to.match(passwordRegex)\n}",
              "err": {},
              "uuid": "a54f9652-b6e4-4239-902f-4e0e454ad4f6",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm password",
              "fullTitle": "user registration should confirm password",
              "timedOut": false,
              "duration": 489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].password).to.match(usersData[x].confirmPassword)\n}",
              "err": {},
              "uuid": "06d94ef1-eb3d-492e-a6c2-d0f4d9ee358d",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate lastName",
              "fullTitle": "user registration should validate lastName",
              "timedOut": false,
              "duration": 480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n    expect(usersData[x].lastName.length).to.be.greaterThanOrEqual(1)\n    expect(usersData[x].lastName.length).to.be.lessThan(20)\n}",
              "err": {},
              "uuid": "b6f4639e-ff7d-44c3-aa64-af367c05df98",
              "parentUUID": "7f65d661-af25-4a31-b9c9-e8ef8ac61ca3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ca98c749-bc3a-4807-b599-1e2aeb68b60a",
            "56a26c9e-2bc4-4cd4-8dbb-f9fa0213bb2f",
            "02139732-4479-4d92-ad37-4de63e289d0e",
            "1ed8dfb1-2eeb-4dc7-8a7d-c30722f1bd8c",
            "a54f9652-b6e4-4239-902f-4e0e454ad4f6",
            "06d94ef1-eb3d-492e-a6c2-d0f4d9ee358d",
            "b6f4639e-ff7d-44c3-aa64-af367c05df98"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3561,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a1f8ae5a-7762-4d76-8355-719ed3e325a6",
          "title": "forgetPassword",
          "fullFile": "C:\\Users\\Gu\\Desktop\\Task\\tests\\api2-test.js",
          "file": "\\tests\\api2-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should validate password",
              "fullTitle": "forgetPassword should validate password",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let data = await usersData()\nconst passwordRegex = (\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].password).to.match(usersData[x].password)\n      }",
              "err": {},
              "uuid": "3ffdfc90-9a2f-42c4-920c-186689ffb924",
              "parentUUID": "a1f8ae5a-7762-4d76-8355-719ed3e325a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate newPassword",
              "fullTitle": "forgetPassword should validate newPassword",
              "timedOut": false,
              "duration": 486,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nconst passwordRegex = (\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})\");\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].newPassword).to.match(passwordRegex)\n  }",
              "err": {},
              "uuid": "28212e82-b4d4-4af1-9dad-cee3bbe3469f",
              "parentUUID": "a1f8ae5a-7762-4d76-8355-719ed3e325a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirmNewPassword",
              "fullTitle": "forgetPassword should confirmNewPassword",
              "timedOut": false,
              "duration": 556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// add an assertion\nlet data = await usersData()\nfor(let x = 0  ; x <= usersData.length-1;x++){\n  expect(usersData[x].newPassword).to.match(usersData[x].confirmNewPassword)\n}",
              "err": {},
              "uuid": "89723a65-20ff-447a-8df3-79bd431ddcbe",
              "parentUUID": "a1f8ae5a-7762-4d76-8355-719ed3e325a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ffdfc90-9a2f-42c4-920c-186689ffb924",
            "28212e82-b4d4-4af1-9dad-cee3bbe3469f",
            "89723a65-20ff-447a-8df3-79bd431ddcbe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1550,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}